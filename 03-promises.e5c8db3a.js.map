{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAcA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OADAC,QAAQC,IAAIJ,GACL,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLR,EACFM,EAAQ,C,SAAER,E,MAAUC,IAEpBQ,EAAO,C,SAAET,E,MAAUC,MAEpBA,MAvBMU,SAASC,cAAc,SAE/BC,iBAAiB,UAAUC,IAC9BA,EAAEC,kBAwBJ,SAA8BC,EAAOC,EAAMC,GACzC,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAChBpB,EAAcoB,EAAGH,GAE9BI,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAwB,OAAOC,QAAQ,uBAAqBtB,QAAiBC,UAEtDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAwB,OAAOG,QAAQ,sBAAoBxB,QAAeC,UAEtDe,GAASC,GA7BXQ,CAJcC,SAASZ,EAAEa,cAAcC,SAAgB,MAAEC,OAC5CH,SAASZ,EAAEa,cAAcC,SAAe,KAAEC,OACxCH,SAASZ,EAAEa,cAAcC,SAAiB,OAAEC,QAI3Df,EAAEa,cAAcG","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = parseInt(e.currentTarget.elements['delay'].value);\n  const step = parseInt(e.currentTarget.elements['step'].value);\n  const amount = parseInt(e.currentTarget.elements['amount'].value);\n\n  startGeneratePromise(delay, step, amount);\n\n  e.currentTarget.reset();\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  console.log(shouldResolve);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction startGeneratePromise(delay, step, amount) {\n  for (let i = 1; i <= amount; i++) {\n    const promise = createPromise(i, delay);\n    promise\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","console","log","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","step","amount","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$startGeneratePromise","parseInt","currentTarget","elements","value","reset"],"version":3,"file":"03-promises.e5c8db3a.js.map"}